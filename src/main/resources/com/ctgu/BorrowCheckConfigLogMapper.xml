<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctgu.dao.BorrowCheckConfigLogMapper">

	<resultMap id="BaseResultMap" type="com.ctgu.entity.BorrowCheckConfigLog">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="serialNO" jdbcType="VARCHAR" property="serialNO" />
		<result column="accountId" jdbcType="INTEGER" property="accountId" />
		<result column="userId" jdbcType="INTEGER" property="userId" />
		<result column="handlerName" jdbcType="VARCHAR" property="handlerName" />
		<result column="orderNum" jdbcType="INTEGER" property="orderNum" />
		<result column="executeResult" jdbcType="INTEGER" property="executeResult" />
		<result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
	</resultMap>

	<sql id="Base_Column_List">
		id, serialNO, accountId, userId, handlerName, orderNum, executeResult, createTime
	</sql>

	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from `t_borrowcheckconfiglog`
		where id = #{id,jdbcType=INTEGER}
	</select>
	
	<select id="findByNameAndSerialNO"  parameterType="java.lang.String"   resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from `t_borrowcheckconfiglog`
		where 
		handlerName=#{handlerName,jdbcType=VARCHAR}
		and serialNO=#{serialNO,jdbcType=VARCHAR}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from `t_borrowcheckconfiglog`
		where id =#{id,jdbcType=INTEGER}
	</delete>

	<insert id="insertSelective" parameterType="com.ctgu.entity.BorrowCheckConfigLog">
		insert into `t_borrowcheckconfiglog`
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="serialNO != null">
				serialNO,
			</if>
			<if test="accountId != null">
				accountId,
			</if>
			<if test="userId != null">
				userId,
			</if>
			<if test="handlerName != null">
				handlerName,
			</if>
			<if test="orderNum != null">
				orderNum,
			</if>
			<if test="executeResult != null">
				executeResult,
			</if>
			<if test="createTime != null">
				createTime,
			</if>
			<if test="failedReason != null">
				failedReason,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="serialNO != null">
				#{serialNO,jdbcType=VARCHAR},
			</if>
			<if test="accountId != null">
				#{accountId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="handlerName != null">
				#{handlerName,jdbcType=VARCHAR},
			</if>
			<if test="orderNum != null">
				#{orderNum,jdbcType=INTEGER},
			</if>
			<if test="executeResult != null">
				#{executeResult,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="failedReason != null">
				#{failedReason,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>

	<update id="updateFailedReason" parameterType="com.ctgu.entity.BorrowCheckConfigLog">
		update `t_borrowcheckconfiglog` 
		set 
		failedReason=#{failedReason,jdbcType=VARCHAR}
		where id =
		(
			select a.id from 
			(
				SELECT id FROM `t_borrowcheckconfiglog`   
				where serialNO=#{serialNO,jdbcType=VARCHAR} 
				order by orderNum desc limit 1
			) as a
		)
	</update>

	<update id="updateByPrimaryKeySelective"
		parameterType="com.ctgu.entity.BorrowCheckConfigLog">
		update `t_borrowcheckconfiglog`
		<set>
			<if test="serialNO != null">
				serialNO = #{serialNO,jdbcType=VARCHAR},
			</if>
			<if test="accountId != null">
				accountId = #{accountId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				userId = #{userId,jdbcType=INTEGER},
			</if>
			<if test="handlerName != null">
				handlerName = #{handlerName,jdbcType=VARCHAR},
			</if>
			<if test="orderNum != null">
				orderNum = #{orderNum,jdbcType=INTEGER},
			</if>
			<if test="executeResult != null">
				executeResult = #{executeResult,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				createTime = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="failedReason != null">
				failedReason = #{failedReason,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

</mapper>